<!doctype html>
<html lang="en" ng-app="app">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0, shrink-to-fit=no">
<meta name="mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    
<title>3D Audio Map - WebGL</title>
 
<script async src="library/jquery-3.1.1.min.js"></script>    
<script src="library/gl-matrix-min.js"></script>    
    
</head>

<body onload="pageSetup()">
    
    Welcome                
    
    <br>
    
    <button onclick="setupAudio('currentAudio', 256, 'Adventures.mp3')">Play Adventures!</button>
    <button onclick="setupAudio('currentAudio', 256, 'Sapphire.mp3')">Play Sapphire!</button>
    <button onclick="setupAudio('currentAudio', 256, 'Inf1n1t.mp3')">Play Inf1n1t!</button>
    <button onclick="switch_night()">Night Mode?</button>
    <br>
<!--    <button onclick="stopAudio()">Stop!</button>-->
    	
    <audio id="currentAudio"></audio>
    
    
</body>
    
    <!--TODO Get rid of this in html-->
    <!--Shaders need to come BEFORE logic-->
 <script id="vertexShader_normal" type="notjs">
    attribute vec3 position;
    uniform mat4 Pmatrix;
    uniform mat4 Vmatrix;
    uniform mat4 Mmatrix;
    attribute vec3 color;
    varying vec3 vColor;
    void main(void) { 
       gl_Position = Pmatrix*Vmatrix*Mmatrix*vec4(position, 1.);
       vColor.x = color.x;
       vColor.y = color.y;
       vColor.z = position.y;
    }

</script>
<script id="fragmentShader_normal" type="notjs">
    precision mediump float;
    varying vec3 vColor;
    void main(void) {
        gl_FragColor = vec4(vColor, 1.0);
    }
</script>   
<script id="vertexShader_normal2" type="notjs">
    attribute vec3 vertexPos; 
    attribute vec4 vertexColor; 
    uniform mat4 modelViewMatrix; 
    uniform mat4 projectionMatrix; 
    varying vec4 vColor; 
    void main(void) { 
        // Return the transformed and projected vertex value 
        gl_Position = projectionMatrix * modelViewMatrix * vec4(vertexPos, 1.0); 
        // Output the vertexColor in vColor 
        vColor = vertexColor; 
    }
</script>
<script id="fragmentShader_normal2" type="notjs">
    precision mediump float;
    varying vec4 vColor;
    void main(void) {
        // Return the pixel color: always output white\n" +
        gl_FragColor = vColor;
    }
</script>
    
<!--  Need page to load first  -->
<script src="javascript/contextHolder.js"></script> <!--Global Graphic file-->    
<script src="models/box.js"></script>    
<script src="javascript/audio.js"></script>    
<script src="javascript/graphicMain.js"></script>    
 
</html>